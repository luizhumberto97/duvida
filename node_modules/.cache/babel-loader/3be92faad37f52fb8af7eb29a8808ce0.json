{"ast":null,"code":"var _jsxFileName = \"/home/luiz/estudos/06-gobarber-web/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport { Container, Error } from './styles'; // O Que o input vai receber? -> todas as propriedades do HTML -> por isso vamos criar uma interface\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null); // referencia\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false); // Verificar se está preenchido\n\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []); // Quando declaramos a função em cima da outra, ela sempre é recriada\n\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false); //Se tem algum valor\n\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value)); // Transformado em Boleano -> se estiver valor -> true se for vazio  = false\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isErrored: !!error,\n    isFilled: isFilled,\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  })), error && /*#__PURE__*/React.createElement(Error, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \" \", /*#__PURE__*/React.createElement(FiAlertCircle, {\n    color: \"#c53030\",\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }), \" \"));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/luiz/estudos/06-gobarber-web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","FiAlertCircle","useField","Container","Error","Input","name","icon","Icon","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputFocus","handleInputBlur","current","value","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAAoCC,SAApC,EAA+CC,MAA/C,EAAuDC,QAAvD,EAAiEC,WAAjE,QAAmF,OAAnF;AAEA,SAAQC,aAAR,QAA4B,gBAA5B;AACA,SAASC,QAAT,QAAwB,cAAxB;AAEA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,UAAjC,C,CAEA;;AAQA,MAAMC,KAA2B,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAI,EAAEC,IAAb;AAAmB,KAAGC;AAAtB,CAAD,KAAiC;AACnE,QAAMC,QAAQ,GAAGZ,MAAM,CAAmB,IAAnB,CAAvB,CADmE,CAClB;;AAEjD,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC,CAJmE,CAIlB;;AAEjD,QAAM;AAACgB,IAAAA,SAAD;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAAkDhB,QAAQ,CAACI,IAAD,CAAhE;AAEA,QAAMa,gBAAgB,GAAGnB,WAAW,CAAC,MAAM;AACzCY,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAElC,EAFkC,CAApC,CARmE,CAcnE;;AACA,QAAMQ,eAAe,GAAGpB,WAAW,CAAC,MAAM;AAAA;;AACxCY,IAAAA,YAAY,CAAC,KAAD,CAAZ,CADwC,CAExC;;AACAE,IAAAA,WAAW,CAAC,CAAC,uBAACJ,QAAQ,CAACW,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX,CAHwC,CAGA;AAEzC,GALkC,EAKjC,EALiC,CAAnC;AAOAzB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,aAAa,CAAC;AACZZ,MAAAA,IAAI,EAAES,SADM;AAEZQ,MAAAA,GAAG,EAAEb,QAAQ,CAACW,OAFF;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMP,CAACT,SAAD,EAAYG,aAAZ,CANO,CAAT;AASA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAE,CAAC,CAACD,KAAxB;AAA+B,IAAA,QAAQ,EAAEJ,QAAzC;AAAmD,IAAA,SAAS,EAAEF,SAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAECH,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFT,eAGA;AACA,IAAA,OAAO,EAAEW,gBADT;AAEA,IAAA,MAAM,EAAEC,eAFR;AAGA,IAAA,YAAY,EAAEJ,YAHd;AAIC,IAAA,GAAG,EAAEN;AAJN,KAKMD,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHA,EAUGQ,KAAK,iBAAI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAQ,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAC,SAArB;AAA+B,IAAA,IAAI,EAAE,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR,MAVZ,CADF;AAeC,CA9CH;;AAgDA,eAAeZ,KAAf","sourcesContent":["import React, {InputHTMLAttributes, useEffect, useRef, useState, useCallback} from 'react';\nimport {IconBaseProps} from 'react-icons';\nimport {FiAlertCircle} from 'react-icons/fi';\nimport { useField} from '@unform/core';\n\nimport { Container, Error } from './styles';\n\n// O Que o input vai receber? -> todas as propriedades do HTML -> por isso vamos criar uma interface\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement>{\n  name: string; /* Nome Obrigatorio */\n  icon: React.ComponentType<IconBaseProps>;\n\n}\n\n\nconst Input: React.FC<InputProps> = ({name, icon: Icon, ...rest}) => {\n  const inputRef = useRef<HTMLInputElement>(null); // referencia\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false); // Verificar se está preenchido\n\n  const {fieldName, defaultValue, error, registerField} = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  },[])\n\n\n\n  // Quando declaramos a função em cima da outra, ela sempre é recriada\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n    //Se tem algum valor\n    setIsFilled(!!inputRef.current?.value); // Transformado em Boleano -> se estiver valor -> true se for vazio  = false\n\n  },[]);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  },[fieldName, registerField]);\n\n\n  return (\n    <Container isErrored={!!error} isFilled={isFilled} isFocused={isFocused}>\n\n    {Icon && <Icon size={20} />}\n    <input\n    onFocus={handleInputFocus}\n    onBlur={handleInputBlur}\n    defaultValue={defaultValue}\n     ref={inputRef}\n      {...rest} />\n\n      {error && <Error> <FiAlertCircle color=\"#c53030\" size={20} /> </Error>}\n  </Container>\n  );\n\n  };\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}