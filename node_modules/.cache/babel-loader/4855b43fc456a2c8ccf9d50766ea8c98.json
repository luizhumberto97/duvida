{"ast":null,"code":"var _jsxFileName = \"/home/luiz/estudos/06-gobarber-web/src/context/AuthContext.tsx\";\nimport React, { createContext, useCallback, useState, useContext } from 'react';\nimport api from '../services/api';\nconst AuthContext = createContext({});\n\nconst AuthProvider = ({\n  children\n}) => {\n  const [data, setData] = useState(() => {\n    // essa l贸gica s贸 serve quando dar um refresh ou sair da conta\n    const token = localStorage.getItem('@GoBarber:token');\n    const user = localStorage.getItem('@GoBarber:user');\n\n    if (token && user) {\n      return {\n        token,\n        user: JSON.parse(user)\n      };\n    }\n\n    return {};\n  });\n  const signIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const response = await api.post('sessions', {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n    localStorage.setItem('@GoBarber:token', token);\n    localStorage.setItem('@GoBarber:user', JSON.stringify(user));\n    setData({\n      token,\n      user\n    }); // Depois de fazer o login, vai preencher o token e o usuario no estado\n  }, []);\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      user: data.user,\n      signIn\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAUth must be used within an AUthProvider');\n  }\n\n  return context;\n}\n\nexport { AuthProvider, useAuth };","map":{"version":3,"sources":["/home/luiz/estudos/06-gobarber-web/src/context/AuthContext.tsx"],"names":["React","createContext","useCallback","useState","useContext","api","AuthContext","AuthProvider","children","data","setData","token","localStorage","getItem","user","JSON","parse","signIn","email","password","response","post","setItem","stringify","useAuth","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,WAA9B,EAA2CC,QAA3C,EAAqDC,UAArD,QAAsE,OAAtE;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAiBC,MAAMC,WAAW,GAAGL,aAAa,CAAkB,EAAlB,CAAjC;;AAEA,MAAMM,YAAsB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAC9C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAY,MAAM;AAChD;AAEA,UAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAd;AACA,UAAMC,IAAI,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAb;;AAEA,QAAGF,KAAK,IAAIG,IAAZ,EAAiB;AACf,aAAO;AAACH,QAAAA,KAAD;AAAQG,QAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWF,IAAX;AAAd,OAAP;AACD;;AAED,WAAO,EAAP;AAED,GAZ+B,CAAhC;AAcE,QAAMG,MAAM,GAAGf,WAAW,CAAC,OAAO;AAACgB,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAP,KAA6B;AACtD,UAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACgB,IAAJ,CAAS,UAAT,EAAqB;AAC1CH,MAAAA,KAD0C;AAE1CC,MAAAA;AAF0C,KAArB,CAAvB;AAKA,UAAM;AAACR,MAAAA,KAAD;AAAQG,MAAAA;AAAR,QAAgBM,QAAQ,CAACX,IAA/B;AAEAG,IAAAA,YAAY,CAACU,OAAb,CAAqB,iBAArB,EAAwCX,KAAxC;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,gBAArB,EAAuCP,IAAI,CAACQ,SAAL,CAAeT,IAAf,CAAvC;AAEAJ,IAAAA,OAAO,CAAC;AAACC,MAAAA,KAAD;AAAQG,MAAAA;AAAR,KAAD,CAAP,CAXsD,CAW9B;AAEzB,GAbyB,EAavB,EAbuB,CAA1B;AAeF,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACA,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAZ;AAAkBG,MAAAA;AAAlB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,QADH,CADF;AAKD,CAnCA;;AAqCC,SAASgB,OAAT,GAAmC;AACjC,QAAMC,OAAO,GAAGrB,UAAU,CAACE,WAAD,CAA1B;;AAEA,MAAG,CAACmB,OAAJ,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AAED;;AACH,SAAQlB,YAAR,EAAsBiB,OAAtB","sourcesContent":["import React, {createContext, useCallback, useState, useContext} from 'react';\nimport api from '../services/api';\n\ninterface AuthState{\n  token: string;\n  user: object;\n}\n\ninterface SignInCredentials{\n  email: string;\n  password: string;\n}\n\ninterface AuthContextData{\n  user: object;\n  signIn(credentials: SignInCredentials): Promise<void>;\n}\n\n const AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\n const AuthProvider: React.FC = ({children}) => {\n  const [data, setData] = useState<AuthState>(() => {\n    // essa l贸gica s贸 serve quando dar um refresh ou sair da conta\n\n    const token = localStorage.getItem('@GoBarber:token');\n    const user = localStorage.getItem('@GoBarber:user');\n\n    if(token && user){\n      return {token, user: JSON.parse(user)};\n    }\n\n    return {} as AuthState;\n\n  });\n\n    const signIn = useCallback(async ({email, password}) => {\n      const response = await api.post('sessions', {\n        email,\n        password,\n      });\n\n      const {token, user} = response.data;\n\n      localStorage.setItem('@GoBarber:token', token);\n      localStorage.setItem('@GoBarber:user', JSON.stringify(user));\n\n      setData({token, user}); // Depois de fazer o login, vai preencher o token e o usuario no estado\n\n    }, []);\n\n  return(\n    <AuthContext.Provider value={{user: data.user, signIn}}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n  function useAuth(): AuthContextData{\n    const context = useContext(AuthContext);\n\n    if(!context){\n      throw new Error('useAUth must be used within an AUthProvider')\n    }\n\n    return context;\n\n  }\nexport {AuthProvider, useAuth};\n"]},"metadata":{},"sourceType":"module"}