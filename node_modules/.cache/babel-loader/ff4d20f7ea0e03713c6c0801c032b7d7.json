{"ast":null,"code":"var _jsxFileName = \"/home/luiz/estudos/06-gobarber-web/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useField } from '@unform/core';\nimport { Container } from './styles'; // O Que o input vai receber? -> todas as propriedades do HTML -> por isso vamos criar uma interface\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null); // referencia\n\n  const [isFocused, setIsFocused] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, // Se o ICON EXISTIR\n  Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: () => setIsFocused(true),\n    onBlur: () => setIsFocused(false),\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/luiz/estudos/06-gobarber-web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useField","Container","Input","name","icon","Icon","rest","inputRef","isFocused","setIsFocused","fieldName","defaultValue","error","registerField","ref","current","path"],"mappings":";AAAA,OAAOA,KAAP,IAAoCC,SAApC,EAA+CC,MAA/C,EAAuDC,QAAvD,QAAsE,OAAtE;AAEA,SAASC,QAAT,QAAwB,cAAxB;AAEA,SAASC,SAAT,QAA0B,UAA1B,C,CAEA;;AAQA,MAAMC,KAA2B,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAI,EAAEC,IAAb;AAAmB,KAAGC;AAAtB,CAAD,KAAiC;AACnE,QAAMC,QAAQ,GAAGT,MAAM,CAAC,IAAD,CAAvB,CADmE,CACpC;;AAC/B,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAACW,IAAAA,SAAD;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAAkDb,QAAQ,CAACG,IAAD,CAAhE;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,aAAa,CAAC;AACZV,MAAAA,IAAI,EAAEO,SADM;AAEZI,MAAAA,GAAG,EAAEP,QAAQ,CAACQ,OAFF;AAGZC,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMP,CAACN,SAAD,EAAYG,aAAZ,CANO,CAAT;AASA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEL,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGA;AACEH,EAAAA,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJV,eAMA;AACA,IAAA,OAAO,EAAE,MAAMI,YAAY,CAAC,IAAD,CAD3B;AAEA,IAAA,MAAM,EAAE,MAAMA,YAAY,CAAC,KAAD,CAF1B;AAGA,IAAA,YAAY,EAAEE,YAHd;AAIC,IAAA,GAAG,EAAEJ;AAJN,KAKMD,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KANA,CADF;AAgBC,CA9BH;;AAgCA,eAAeJ,KAAf","sourcesContent":["import React, {InputHTMLAttributes, useEffect, useRef, useState} from 'react';\nimport {IconBaseProps} from 'react-icons';\nimport { useField} from '@unform/core';\n\nimport { Container } from './styles';\n\n// O Que o input vai receber? -> todas as propriedades do HTML -> por isso vamos criar uma interface\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement>{\n  name: string; /* Nome Obrigatorio */\n  icon: React.ComponentType<IconBaseProps>;\n\n}\n\n\nconst Input: React.FC<InputProps> = ({name, icon: Icon, ...rest}) => {\n  const inputRef = useRef(null); // referencia\n  const [isFocused, setIsFocused] = useState(false);\n  const {fieldName, defaultValue, error, registerField} = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  },[fieldName, registerField]);\n\n\n  return (\n    <Container isFocused={isFocused}>\n\n    {\n    // Se o ICON EXISTIR\n      Icon && <Icon size={20} />\n    }\n    <input\n    onFocus={() => setIsFocused(true)}\n    onBlur={() => setIsFocused(false)}\n    defaultValue={defaultValue}\n     ref={inputRef}\n      {...rest} />\n  </Container>\n  )\n\n  };\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}